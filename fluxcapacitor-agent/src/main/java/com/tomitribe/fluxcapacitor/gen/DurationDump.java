/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package com.tomitribe.fluxcapacitor.gen;

import org.objectweb.asm.AnnotationVisitor;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;

public class DurationDump implements Opcodes {

    public static byte[] dump() throws Exception {

        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;
        AnnotationVisitor av0;

        cw.visit(V1_6, ACC_PUBLIC + ACC_SUPER, "com/tomitribe/fluxcapacitor/gen/Duration",
                "Ljava/lang/Object;Ljava/lang/Comparable<Lcom/tomitribe/fluxcapacitor/gen/Duration;>;",
                "java/lang/Object", new String[]{"java/lang/Comparable"});

        {
            fv = cw.visitField(0, "time", "J", null, null);
            fv.visitEnd();
        }
        {
            fv = cw.visitField(0, "unit", "Ljava/util/concurrent/TimeUnit;", null, null);
            fv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            mv.visitInsn(RETURN);
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(JLjava/util/concurrent/TimeUnit;)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(LLOAD, 1);
            mv.visitFieldInsn(PUTFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "time", "J");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitFieldInsn(PUTFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "unit", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(RETURN);
            mv.visitMaxs(3, 4);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Ljava/lang/String;)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ACONST_NULL);
            mv.visitMethodInsn(INVOKESPECIAL, "com/tomitribe/fluxcapacitor/gen/Duration", "<init>",
                    "(Ljava/lang/String;Ljava/util/concurrent/TimeUnit;)V", false);
            mv.visitInsn(RETURN);
            mv.visitMaxs(3, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "(Ljava/lang/String;Ljava/util/concurrent/TimeUnit;)V", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn(",| and ");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "split", "(Ljava/lang/String;)[Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 3);
            mv.visitTypeInsn(NEW, "com/tomitribe/fluxcapacitor/gen/Duration");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "com/tomitribe/fluxcapacitor/gen/Duration", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ASTORE, 5);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ISTORE, 6);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 7);
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitFrame(Opcodes.F_FULL, 8, new Object[]{"com/tomitribe/fluxcapacitor/gen/Duration", "java/lang/String",
                    "java/util/concurrent/TimeUnit", "[Ljava/lang/String;", "com/tomitribe/fluxcapacitor/gen/Duration",
                    "[Ljava/lang/String;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[]{});
            mv.visitVarInsn(ILOAD, 7);
            mv.visitVarInsn(ILOAD, 6);
            Label l1 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l1);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitVarInsn(ILOAD, 7);
            mv.visitInsn(AALOAD);
            mv.visitVarInsn(ASTORE, 8);
            mv.visitTypeInsn(NEW, "com/tomitribe/fluxcapacitor/gen/Duration");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "com/tomitribe/fluxcapacitor/gen/Duration", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 9);
            mv.visitVarInsn(ALOAD, 8);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "trim", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 10);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 11);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 12);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 13);
            Label l2 = new Label();
            mv.visitLabel(l2);
            mv.visitFrame(Opcodes.F_FULL, 14, new Object[]{"com/tomitribe/fluxcapacitor/gen/Duration", "java/lang/String",
                    "java/util/concurrent/TimeUnit", "[Ljava/lang/String;", "com/tomitribe/fluxcapacitor/gen/Duration",
                    "[Ljava/lang/String;", Opcodes.INTEGER, Opcodes.INTEGER, "java/lang/String",
                    "com/tomitribe/fluxcapacitor/gen/Duration", "java/lang/String", "java/lang/StringBuilder",
                    "java/lang/StringBuilder", Opcodes.INTEGER}, 0, new Object[]{});
            mv.visitVarInsn(ILOAD, 13);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
            Label l3 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l3);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitVarInsn(ILOAD, 13);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
            mv.visitVarInsn(ISTORE, 14);
            mv.visitVarInsn(ILOAD, 14);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isDigit", "(C)Z", false);
            Label l4 = new Label();
            mv.visitJumpInsn(IFNE, l4);
            mv.visitVarInsn(ILOAD, 13);
            mv.visitJumpInsn(IFNE, l3);
            mv.visitVarInsn(ILOAD, 14);
            mv.visitIntInsn(BIPUSH, 45);
            mv.visitJumpInsn(IF_ICMPNE, l3);
            mv.visitLabel(l4);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.INTEGER}, 0, null);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitVarInsn(ILOAD, 14);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(C)Ljava/lang/StringBuilder;", false);
            mv.visitInsn(POP);
            mv.visitIincInsn(13, 1);
            mv.visitJumpInsn(GOTO, l2);
            mv.visitLabel(l3);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "length", "()I", false);
            Label l5 = new Label();
            mv.visitJumpInsn(IFNE, l5);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKESTATIC, "com/tomitribe/fluxcapacitor/gen/Duration", "invalidFormat",
                    "(Ljava/lang/String;)V", false);
            mv.visitLabel(l5);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ILOAD, 13);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
            Label l6 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l6);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitVarInsn(ILOAD, 13);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
            mv.visitVarInsn(ISTORE, 14);
            mv.visitVarInsn(ILOAD, 14);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isWhitespace", "(C)Z", false);
            mv.visitJumpInsn(IFEQ, l6);
            mv.visitIincInsn(13, 1);
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l6);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ILOAD, 13);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
            Label l7 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l7);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitVarInsn(ILOAD, 13);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C", false);
            mv.visitVarInsn(ISTORE, 14);
            mv.visitVarInsn(ILOAD, 14);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Character", "isLetter", "(C)Z", false);
            Label l8 = new Label();
            mv.visitJumpInsn(IFEQ, l8);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitVarInsn(ILOAD, 14);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(C)Ljava/lang/StringBuilder;", false);
            mv.visitInsn(POP);
            Label l9 = new Label();
            mv.visitJumpInsn(GOTO, l9);
            mv.visitLabel(l8);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.INTEGER}, 0, null);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitMethodInsn(INVOKESTATIC, "com/tomitribe/fluxcapacitor/gen/Duration", "invalidFormat", "(Ljava/lang/String;)V", false);
            mv.visitLabel(l9);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            mv.visitIincInsn(13, 1);
            mv.visitJumpInsn(GOTO, l6);
            mv.visitLabel(l7);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Integer", "parseInt", "(Ljava/lang/String;)I", false);
            mv.visitInsn(I2L);
            mv.visitFieldInsn(PUTFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "time", "J");
            mv.visitVarInsn(ALOAD, 9);
            mv.visitVarInsn(ALOAD, 12);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESTATIC, "com/tomitribe/fluxcapacitor/gen/Duration", "parseUnit",
                    "(Ljava/lang/String;)Ljava/util/concurrent/TimeUnit;", false);
            mv.visitFieldInsn(PUTFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "unit", "Ljava/util/concurrent/TimeUnit;");
            mv.visitVarInsn(ALOAD, 9);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "unit", "Ljava/util/concurrent/TimeUnit;");
            Label l10 = new Label();
            mv.visitJumpInsn(IFNONNULL, l10);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(PUTFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "unit", "Ljava/util/concurrent/TimeUnit;");
            mv.visitLabel(l10);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/tomitribe/fluxcapacitor/gen/Duration", "add",
                    "(Lcom/tomitribe/fluxcapacitor/gen/Duration;)Lcom/tomitribe/fluxcapacitor/gen/Duration;", false);
            mv.visitVarInsn(ASTORE, 4);
            mv.visitIincInsn(7, 1);
            mv.visitJumpInsn(GOTO, l0);
            mv.visitLabel(l1);
            mv.visitFrame(Opcodes.F_FULL, 5, new Object[]{"com/tomitribe/fluxcapacitor/gen/Duration",
                    "java/lang/String", "java/util/concurrent/TimeUnit",
                    "[Ljava/lang/String;", "com/tomitribe/fluxcapacitor/gen/Duration"}, 0, new Object[]{});
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "time", "J");
            mv.visitFieldInsn(PUTFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "time", "J");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "unit", "Ljava/util/concurrent/TimeUnit;");
            mv.visitFieldInsn(PUTFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "unit", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(RETURN);
            mv.visitMaxs(3, 15);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "getTime", "(Ljava/util/concurrent/TimeUnit;)J", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "time", "J");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "unit", "Ljava/util/concurrent/TimeUnit;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/TimeUnit", "convert", "(JLjava/util/concurrent/TimeUnit;)J", false);
            mv.visitInsn(LRETURN);
            mv.visitMaxs(4, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "equals", "(Ljava/lang/Object;)Z", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            Label l0 = new Label();
            mv.visitJumpInsn(IF_ACMPNE, l0);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l0);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 1);
            Label l1 = new Label();
            mv.visitJumpInsn(IFNULL, l1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            Label l2 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l2);
            mv.visitLabel(l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ICONST_0);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l2);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitTypeInsn(CHECKCAST, "com/tomitribe/fluxcapacitor/gen/Duration");
            mv.visitVarInsn(ASTORE, 2);
            mv.visitTypeInsn(NEW, "com/tomitribe/fluxcapacitor/gen/Normalize");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitMethodInsn(INVOKESPECIAL, "com/tomitribe/fluxcapacitor/gen/Normalize", "<init>",
                    "(Lcom/tomitribe/fluxcapacitor/gen/Duration;Lcom/tomitribe/fluxcapacitor/gen/Duration;)V", false);
            mv.visitVarInsn(ASTORE, 3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Normalize", "a", "J");
            mv.visitVarInsn(ALOAD, 3);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Normalize", "b", "J");
            mv.visitInsn(LCMP);
            Label l3 = new Label();
            mv.visitJumpInsn(IFNE, l3);
            mv.visitInsn(ICONST_1);
            Label l4 = new Label();
            mv.visitJumpInsn(GOTO, l4);
            mv.visitLabel(l3);
            mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{
                    "com/tomitribe/fluxcapacitor/gen/Duration", "com/tomitribe/fluxcapacitor/gen/Normalize"}, 0, null);
            mv.visitInsn(ICONST_0);
            mv.visitLabel(l4);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{Opcodes.INTEGER});
            mv.visitInsn(IRETURN);
            mv.visitMaxs(4, 4);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "hashCode", "()I", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "time", "J");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "time", "J");
            mv.visitIntInsn(BIPUSH, 32);
            mv.visitInsn(LUSHR);
            mv.visitInsn(LXOR);
            mv.visitInsn(L2I);
            mv.visitVarInsn(ISTORE, 1);
            mv.visitIntInsn(BIPUSH, 31);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitInsn(IMUL);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "unit", "Ljava/util/concurrent/TimeUnit;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/concurrent/TimeUnit", "hashCode", "()I", false);
            mv.visitInsn(IADD);
            mv.visitVarInsn(ISTORE, 1);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitInsn(IRETURN);
            mv.visitMaxs(5, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "add",
                    "(Lcom/tomitribe/fluxcapacitor/gen/Duration;)Lcom/tomitribe/fluxcapacitor/gen/Duration;", null, null);
            mv.visitCode();
            mv.visitTypeInsn(NEW, "com/tomitribe/fluxcapacitor/gen/Normalize");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "com/tomitribe/fluxcapacitor/gen/Normalize", "<init>",
                    "(Lcom/tomitribe/fluxcapacitor/gen/Duration;Lcom/tomitribe/fluxcapacitor/gen/Duration;)V", false);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitTypeInsn(NEW, "com/tomitribe/fluxcapacitor/gen/Duration");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Normalize", "a", "J");
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Normalize", "b", "J");
            mv.visitInsn(LADD);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Normalize", "base", "Ljava/util/concurrent/TimeUnit;");
            mv.visitMethodInsn(INVOKESPECIAL, "com/tomitribe/fluxcapacitor/gen/Duration", "<init>", "(JLjava/util/concurrent/TimeUnit;)V", false);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(6, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "invalidFormat", "(Ljava/lang/String;)V", null, null);
            mv.visitCode();
            mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitLdcInsn("Illegal duration format: '");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("'.  Valid examples are '10s' or '10 seconds'.");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            mv.visitMaxs(4, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "toString", "()Ljava/lang/String;", null, null);
            mv.visitCode();
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 1);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "time", "J");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(J)Ljava/lang/StringBuilder;", false);
            mv.visitInsn(POP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "unit", "Ljava/util/concurrent/TimeUnit;");
            Label l0 = new Label();
            mv.visitJumpInsn(IFNULL, l0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitLdcInsn(" ");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitInsn(POP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Duration", "unit", "Ljava/util/concurrent/TimeUnit;");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;", false);
            mv.visitInsn(POP);
            mv.visitLabel(l0);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"java/lang/StringBuilder"}, 0, null);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(3, 2);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "parseUnit", "(Ljava/lang/String;)Ljava/util/concurrent/TimeUnit;", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I", false);
            Label l0 = new Label();
            mv.visitJumpInsn(IFNE, l0);
            mv.visitInsn(ACONST_NULL);
            mv.visitInsn(ARETURN);
            mv.visitLabel(l0);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("NANOSECONDS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l1 = new Label();
            mv.visitJumpInsn(IFEQ, l1);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "NANOSECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("NANOSECOND");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l2 = new Label();
            mv.visitJumpInsn(IFEQ, l2);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "NANOSECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l2);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("NANOS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l3 = new Label();
            mv.visitJumpInsn(IFEQ, l3);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "NANOSECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l3);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("NANO");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l4 = new Label();
            mv.visitJumpInsn(IFEQ, l4);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "NANOSECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l4);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("NS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l5 = new Label();
            mv.visitJumpInsn(IFEQ, l5);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "NANOSECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l5);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MICROSECONDS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l6 = new Label();
            mv.visitJumpInsn(IFEQ, l6);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MICROSECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l6);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MICROSECOND");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l7 = new Label();
            mv.visitJumpInsn(IFEQ, l7);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MICROSECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l7);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MICROS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l8 = new Label();
            mv.visitJumpInsn(IFEQ, l8);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MICROSECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l8);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MICRO");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l9 = new Label();
            mv.visitJumpInsn(IFEQ, l9);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MICROSECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l9);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MILLISECONDS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l10 = new Label();
            mv.visitJumpInsn(IFEQ, l10);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MILLISECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l10);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MILLISECOND");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l11 = new Label();
            mv.visitJumpInsn(IFEQ, l11);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MILLISECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l11);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MILLIS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l12 = new Label();
            mv.visitJumpInsn(IFEQ, l12);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MILLISECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l12);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MILLI");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l13 = new Label();
            mv.visitJumpInsn(IFEQ, l13);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MILLISECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l13);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l14 = new Label();
            mv.visitJumpInsn(IFEQ, l14);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MILLISECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l14);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("SECONDS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l15 = new Label();
            mv.visitJumpInsn(IFEQ, l15);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "SECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l15);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("SECOND");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l16 = new Label();
            mv.visitJumpInsn(IFEQ, l16);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "SECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l16);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("SEC");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l17 = new Label();
            mv.visitJumpInsn(IFEQ, l17);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "SECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l17);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("S");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l18 = new Label();
            mv.visitJumpInsn(IFEQ, l18);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "SECONDS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l18);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MINUTES");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l19 = new Label();
            mv.visitJumpInsn(IFEQ, l19);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MINUTES", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l19);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MINUTE");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l20 = new Label();
            mv.visitJumpInsn(IFEQ, l20);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MINUTES", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l20);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("MIN");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l21 = new Label();
            mv.visitJumpInsn(IFEQ, l21);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MINUTES", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l21);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("M");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l22 = new Label();
            mv.visitJumpInsn(IFEQ, l22);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "MINUTES", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l22);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("HOURS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l23 = new Label();
            mv.visitJumpInsn(IFEQ, l23);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "HOURS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l23);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("HOUR");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l24 = new Label();
            mv.visitJumpInsn(IFEQ, l24);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "HOURS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l24);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("HRS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l25 = new Label();
            mv.visitJumpInsn(IFEQ, l25);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "HOURS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l25);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("HR");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l26 = new Label();
            mv.visitJumpInsn(IFEQ, l26);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "HOURS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l26);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("H");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l27 = new Label();
            mv.visitJumpInsn(IFEQ, l27);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "HOURS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l27);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("DAYS");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l28 = new Label();
            mv.visitJumpInsn(IFEQ, l28);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "DAYS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l28);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("DAY");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l29 = new Label();
            mv.visitJumpInsn(IFEQ, l29);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "DAYS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l29);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitLdcInsn("D");
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equalsIgnoreCase", "(Ljava/lang/String;)Z", false);
            Label l30 = new Label();
            mv.visitJumpInsn(IFEQ, l30);
            mv.visitFieldInsn(GETSTATIC, "java/util/concurrent/TimeUnit", "DAYS", "Ljava/util/concurrent/TimeUnit;");
            mv.visitInsn(ARETURN);
            mv.visitLabel(l30);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);
            mv.visitLdcInsn("Unknown time unit '");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn("'.  Supported units ");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitLdcInsn(", ");
            mv.visitMethodInsn(INVOKESTATIC, "java/util/concurrent/TimeUnit", "values", "()[Ljava/util/concurrent/TimeUnit;", false);
            mv.visitMethodInsn(INVOKESTATIC, "com/tomitribe/fluxcapacitor/gen/Duration", "lowercase", "([Ljava/lang/Enum;)Ljava/util/List;", false);
            mv.visitMethodInsn(INVOKESTATIC, "com/tomitribe/fluxcapacitor/gen/FluxCapacitor", "join", "(Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            mv.visitMaxs(5, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "compareTo", "(Lcom/tomitribe/fluxcapacitor/gen/Duration;)I", null, null);
            mv.visitCode();
            mv.visitTypeInsn(NEW, "com/tomitribe/fluxcapacitor/gen/Normalize");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "com/tomitribe/fluxcapacitor/gen/Normalize", "<init>",
                    "(Lcom/tomitribe/fluxcapacitor/gen/Duration;Lcom/tomitribe/fluxcapacitor/gen/Duration;)V", false);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Normalize", "a", "J");
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Normalize", "b", "J");
            mv.visitInsn(LCMP);
            Label l0 = new Label();
            mv.visitJumpInsn(IFLE, l0);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l0);
            mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{"com/tomitribe/fluxcapacitor/gen/Normalize"}, 0, null);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Normalize", "a", "J");
            mv.visitVarInsn(ALOAD, 2);
            mv.visitFieldInsn(GETFIELD, "com/tomitribe/fluxcapacitor/gen/Normalize", "b", "J");
            mv.visitInsn(LCMP);
            Label l1 = new Label();
            mv.visitJumpInsn(IFNE, l1);
            mv.visitInsn(ICONST_0);
            mv.visitInsn(IRETURN);
            mv.visitLabel(l1);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitInsn(ICONST_M1);
            mv.visitInsn(IRETURN);
            mv.visitMaxs(4, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC + ACC_VARARGS, "lowercase", "([Ljava/lang/Enum;)Ljava/util/List;", "([Ljava/lang/Enum;)Ljava/util/List<Ljava/lang/String;>;", null);
            mv.visitCode();
            mv.visitTypeInsn(NEW, "java/util/ArrayList");
            mv.visitInsn(DUP);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
            mv.visitVarInsn(ASTORE, 1);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitVarInsn(ISTORE, 3);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 4);
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitFrame(Opcodes.F_FULL, 5, new Object[]{"[Ljava/lang/Enum;", "java/util/List", "[Ljava/lang/Enum;", Opcodes.INTEGER, Opcodes.INTEGER}, 0, new Object[]{});
            mv.visitVarInsn(ILOAD, 4);
            mv.visitVarInsn(ILOAD, 3);
            Label l1 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l1);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitInsn(AALOAD);
            mv.visitVarInsn(ASTORE, 5);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Enum", "name", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toLowerCase", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(Ljava/lang/Object;)Z", true);
            mv.visitInsn(POP);
            mv.visitIincInsn(4, 1);
            mv.visitJumpInsn(GOTO, l0);
            mv.visitLabel(l1);
            mv.visitFrame(Opcodes.F_CHOP, 3, null, 0, null);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARETURN);
            mv.visitMaxs(2, 6);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC + ACC_BRIDGE + ACC_SYNTHETIC, "compareTo", "(Ljava/lang/Object;)I", null, null);
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitTypeInsn(CHECKCAST, "com/tomitribe/fluxcapacitor/gen/Duration");
            mv.visitMethodInsn(INVOKEVIRTUAL, "com/tomitribe/fluxcapacitor/gen/Duration", "compareTo", "(Lcom/tomitribe/fluxcapacitor/gen/Duration;)I", false);
            mv.visitInsn(IRETURN);
            mv.visitMaxs(2, 2);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }
}
